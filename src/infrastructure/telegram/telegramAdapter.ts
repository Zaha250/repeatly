import {Bot, webhookCallback, Context} from 'grammy';
import type {ITelegramService, TelegramCommandHandler} from './telegramService';
import {TelegramCommand} from './telegramService';
import type {ITelegramRouterAdapter, StartHandler} from '../../presentation/routerInterface';
import type {HandleStartCommandRequestDto} from '../../modules/user/presentation/dto/userDto';

export class TelegramAdapter implements ITelegramService, ITelegramRouterAdapter {
    private readonly bot: Bot;

    constructor(token: string) {
        this.bot = new Bot(token);
        console.log('ü§ñ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
     * */
    async sendMessage(chatId: number | string, msg: string): Promise<void> {
        await this.bot.api.sendMessage(chatId, msg);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
     * */
    command(command: TelegramCommand, handler: TelegramCommandHandler) {
        this.bot.command(command, async (ctx: Context) => {
            try {
                await handler(ctx);
            } catch (e) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /${TelegramCommand.Start}:`, e.message);
                await ctx.reply('–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        });
    }

    public getWebhookMiddleware() {
        return webhookCallback(this.bot, 'express');
    }

    async start(): Promise<void> {
        await this.bot.start();
        console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
     * */
    public onStart(handler: StartHandler): void {
        this.bot.command(TelegramCommand.Start, async (ctx) => {
            try {
                const {from, chatId} = ctx;
                if (!from || !chatId) {
                    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ —á–∞—Ç–µ');
                }

                const dto: HandleStartCommandRequestDto = {
                    chatId: chatId,
                    from: {
                        id: from.id,
                        username: from.username ?? '',
                        first_name: from.first_name ?? '',
                    },
                };

                await handler(dto);
            } catch (e) {
                console.error(
                    `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /${TelegramCommand.Start}:`,
                    (e as Error).message
                );
                await ctx.reply('–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        });
    }
}
