import type {IUserRepository} from '../../domain/repository/userRepository';
import type {ITelegramService} from '../../../../core/telegram/telegramServiceInterface';
import type {User} from '../../domain/entity/userEntity';

export interface HandleStartCommandDto {
    chatId: number;
    user: {
        id: number;
        username: string;
        firstName: string;
    };
}

export class HandleStartCommandUseCase {
    constructor(
        private readonly userRepository: IUserRepository,
        private readonly telegramService: ITelegramService
    ) {}

    async execute(dto: HandleStartCommandDto): Promise<void> {
        const userEntity: User = {
            id: dto.user.id.toString(), //–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            tgId: dto.user.id,
            username: dto.user.username,
            firstName: dto.user.firstName,
            createdAt: new Date().toISOString(), //–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        };

        const user = await this.userRepository.findOrCreate(userEntity);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = `üëã –ü—Ä–∏–≤–µ—Ç, ${user.firstName}!\n\n–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–ª–æ–≤. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n*—Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥*`;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º parse_mode Markdown, —á—Ç–æ–±—ã –∑–≤–µ–∑–¥–æ—á–∫–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        await this.telegramService.sendMessage(dto.chatId, message);
    }
}
